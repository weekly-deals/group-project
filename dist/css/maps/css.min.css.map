{"version":3,"sources":["first.css","first.styl","../node_modules/rupture/rupture/index.styl"],"names":[],"mappings":"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","file":"../css.min.css","sourcesContent":[".gradient,.main-nav-bar{position:fixed;top:0;width:100%}.gradient,.home-container{width:100%}.day-options,.deal-desc,.location-filter,.nav-filter{text-align:center}.deal-desc:hover,.deal:hover{animation-fill-mode:forwards;animation-duration:.6s;cursor:pointer}@font-face{font-family:\"San Francisco\";font-weight:100;src:url(https://applesocial.s3.amazonaws.com/assets/styles/fonts/sanfrancisco/sanfranciscodisplay-ultralight-webfont.woff)}@font-face{font-family:\"San Francisco\";font-weight:200;src:url(https://applesocial.s3.amazonaws.com/assets/styles/fonts/sanfrancisco/sanfranciscodisplay-thin-webfont.woff)}@font-face{font-family:\"San Francisco\";font-weight:400;src:url(https://applesocial.s3.amazonaws.com/assets/styles/fonts/sanfrancisco/sanfranciscodisplay-regular-webfont.woff)}[ng-cloak],[ng:cloak]{display:none!important}html{box-sizing:border-box}*,:after,:before{box-sizing:inherit}body{height:100%;wight:100%;margin-top:300px;font-family:'San Francisco'}@media only screen and (max-width:675px){body{font-size:8px}}.large-text{font-weight:400;font-size:3.75em}.small-text{cursor:pointer;font-weight:200;font-size:1.5em}.light-text,.medium-text,.medium-text2{font-size:2.25em;align-self:flex-end}.medium-text{font-weight:400;display:flex;cursor:pointer}.medium-text2{font-weight:400;display:flex}.light-text,.top-nav-tabs{font-weight:100;display:flex}.main-container{background:#dd2e44}.main-nav-bar{background-color:transparent;color:#f2f2f2;z-index:20}.gradient{z-index:19;height:350px;background:linear-gradient(#dd2e44,transparent)}.leftArrow,.rightArrow{position:absolute;top:470px}@media only screen and (max-width:600px){.gradient{height:225px}}.style-nav{margin-left:20px}.top-nav-tabs{font-size:1.75em;justify-content:space-around}.top-nav-tabs a{margin:0}.top-nav-tabs ul{padding:0;margin:10px}.top-nav-tabs li{margin:0 60px;cursor:pointer}@media only screen and (max-width:900px){.top-nav-tabs li{margin:0 30px}}@media only screen and (max-width:675px){.top-nav-tabs li{margin:0 18px}}.leftArrow{transform:rotate(180deg)}.rightArrow{right:0}.nav-bottom{margin:25px auto 0;max-width:800px;display:flex;align-items:flex-end;flex-direction:row;justify-content:space-around}.location-filter{background:0 0;border:none;font-color:#f2f2f2;font-weight:400;font-size:2.5em;padding-right:0;margin:0;height:50px}.cat-option,.cat-selector{border:none;background-color:transparent;outline:0}.location-filter::placeholder{color:#f2f2f2;font-weight:400;font-size:1em}.location-filter:focus{outline:0}@media only screen and (max-width:600px){.location-filter{height:25px}}.cat-selector{white-space:none;width:20px;cursor:pointer}.cat-option{color:inherit}.day-option,.modal{background-color:#f2f2f2}.day{display:flex;align-self:flex-end}.day-options{display:flex;align-self:flex-end;cursor:pointer;margin-bottom:-4px}.day-option{color:#dd2e44;border:#58595b;border-radius:5px;margin:2px;outline:0;height:30px;width:30px;line-height:20px;display:flex;align-self:center;align-items:center;justify-content:center;font-size:20px;cursor:pointer}.cat-title,.deal-desc,a{color:#f2f2f2}@media only screen and (max-width:600px){.day-option{height:20px;width:20px;font-size:12px;margin-bottom:6px}}h2,h4{margin:0 auto}li{display:inline-block}.cat-title,.deal,.deal-desc,.deal-pic{display:flex}a{text-decoration:none}.cat-title{font-weight:400;font-size:2.25em}.cat-title span{margin:auto}.deal{min-width:220px;height:300px;margin:25px;background:#f2f2f2;border-radius:5px;flex-direction:column;font-color:#58595b;font-size:24px;font-weight:ultralight;border:1.8px solid #58595b;padding-bottom:18px}.deal:hover{animation-name:fade-out}.main-deals-container{margin-top:325px}@media only screen and (max-width:600px){.main-deals-container{margin-top:-90px}}.deal-desc{flex-direction:column;justify-content:center;width:220px;height:300px;z-index:20}.deal-footer,.deal-header{width:100%;height:20%;text-align:center}.deal-desc:hover{animation-name:fade-in}.deal-header{margin-top:5%}.deal-pic{justify-content:center;align-items:center}.deal-footer{margin:auto auto 3%}.cat-container{overflow:hidden}.deals-container{display:flex;flex-direction:row;overflow-x:auto;overflow-y:hidden;margin-bottom:-20px;padding-bottom:20px}.column-2,.modal{display:block}.modal{position:fixed;z-index:100;left:0;top:0;width:60%;height:80%;overflow:auto;overflow-x:hidden;color:#000;text-align:center;margin:5% 20%;border-radius:10px;box-shadow:0 1px 4px rgba(0,0,0,.3),0 0 40px rgba(0,0,0,.1) inset}@media only screen and (max-width:600px){.modal{margin:0;width:100%;height:100%}}#modal-curtain{height:200vh;width:100vw;top:0;left:0;background-color:rgba(50,50,50,.92);position:absolute;z-index:20}.column-1,.column-2{width:40%}.weblink{color:#00f}.svg-wrapper{overflow:hidden}.svgDisplay{display:flex;flex-direction:row;overflow-y:hidden;overflow-x:auto;margin-bottom:-20px;padding-bottom:20px}.svgDisplay svg{min-width:75px}.modal-content{margin:auto;display:block;width:80%;max-width:700px}.data-entry{text-align:center}.deal-entry{width:100%;margin:auto}.deal-title-input{border-radius:15px;height:30px;border:none;margin:5px;width:30%}.day-wrapper{display:flex;justify-content:space-between;width:30%;margin:5px 35%}.day-box{color:#f2f2f2;background-color:#dd2e44;border-radius:3px;height:23px;width:23px}.deal-textarea{width:60%;border-radius:15px;margin:5px;border:none}.bus-entry{width:100%}.bus-name-input{border-radius:15px;height:30px;border:none;margin:5px;width:50%}#close{position:absolute;top:15px;right:35px;color:#bbb;font-weight:400;font-size:2.5em;transition:.3s}.signup-button,.signup-form{width:400px;font-weight:100}#close:focus,#close:hover{color:#58595b;text-decoration:none;cursor:pointer}.signup-form{margin:auto;font-size:1.875em}.signup-inputs{border:0;border-radius:30px;color:#58595b;width:400px;height:60px;margin-bottom:10px;text-align:center}.signup-inputs:focus{outline:0}.signup-button{border:0;border-radius:30px;background:#f2f2f2;color:#dd2e44;height:60px;text-align:center;font-size:1.5em}.login-footer,.login-header,.password-match-error,.signup-footer,.signup-header{color:#f2f2f2;text-align:center}.signup-button:focus{outline:0}.password-match-error{font-weight:200;font-size:1.25em;margin-bottom:0}.signup-header{font-weight:400;font-size:3.75em}.login-footer,.signup-footer{font-weight:200;font-size:1.25em;margin-top:0}.login-header{font-weight:400;font-size:3.75em}.login-button,.login-form{font-weight:100;width:400px}.login-button{border:0;border-radius:30px;background:#f2f2f2;color:#dd2e44;height:60px;text-align:center;font-size:1.5em;margin-bottom:10px}.login-button:focus{outline:0}.login-form{margin:auto;font-size:1.875em}.login-inputs{border:0;border-radius:30px;color:#58595b;width:400px;height:60px;margin-bottom:10px;text-align:center}#fb,#twitter,.option{color:#f2f2f2}.login-inputs:focus{outline:0}.options{background-color:transparent;font-weight:400;font-size:1.1em;border:0;margin:-10px;cursor:pointer}.options:focus{outline:0}.option{font-weight:100;font-size:1.875em;text-align:center;margin-top:0;margin-bottom:10px;padding-top:0}.alt-login{margin:auto;width:400px}#twitter{background:#1da1f2}#fb{background:#3a5795}.profile-wrap{text-align:center}.profilePic{height:200px;width:200px;border-radius:15px 5px;margin:10px}.edit-button,.edit-inputs{height:40px;text-align:center}.edit-inputs{border:0;border-radius:30px;color:#58595b;width:300px;margin-bottom:10px}.edit-button,.img-input{color:#f2f2f2;width:300px}.edit-inputs:focus{outline:0}.edit-button{border:0;border-radius:30px;background:#dd2e44;font-weight:100;font-size:1.5em;margin:10px}.edit-button:focus{outline:0}.img-input{padding-left:50px;padding-top:5px;background:#58595b;border-radius:15px;margin:5px;height:30px}.img-input:focus{outline:0}.edit-form{display:block}.color-btn{margin:5px auto;height:60px;width:60px;border-radius:50px;border:none;box-shadow:0 5px 0 #000}.color-btn:focus{outline:0}.color-btn:active{box-shadow:0 1px 0 #000;position:relative;top:4px}#yellow{background:#ff0}#orange{background:orange}#red{background:#dd2e44}#green{background:green}#blue{background:#00f}#purple{background:purple}@-moz-keyframes fade-out{from{background-color:#f2f2f2}to{background-color:#58595b}}@-webkit-keyframes fade-out{from{background-color:#f2f2f2}to{background-color:#58595b}}@-o-keyframes fade-out{from{background-color:#f2f2f2}to{background-color:#58595b}}@keyframes fade-out{from{background-color:#f2f2f2}to{background-color:#58595b}}@-moz-keyframes fade-in{from{opacity:.2}to{opacity:1}}@-webkit-keyframes fade-in{from{opacity:.2}to{opacity:1}}@-o-keyframes fade-in{from{opacity:.2}to{opacity:1}}@keyframes fade-in{from{opacity:.2}to{opacity:1}}",null,"base-font-size ?= 16px\nrasterise-media-queries ?= false\n\nrupture = {\n  rasterise-media-queries: rasterise-media-queries\n  mobile-cutoff: 400px\n  desktop-cutoff: 1050px\n  hd-cutoff: 1800px\n  enable-em-breakpoints: false\n  base-font-size: base-font-size\n  anti-overlap: false\n  density-queries: 'dppx' 'webkit' 'moz' 'dpi'\n  retina-density: 1.5\n  use-device-width: false\n}\nrupture.scale = 0 (rupture.mobile-cutoff) 600px 800px (rupture.desktop-cutoff) (rupture.hd-cutoff)\nrupture.scale-names = 'xs' 's' 'm' 'l' 'xl' 'hd'\n\n-is-string(val)\n  if typeof(val) is not 'unit'\n    if val is a 'string' or val is a 'ident'\n      true\n    else\n      false\n  else\n    false\n\n-get-scale-number(scale-name)\n  for list-item, i in rupture.scale-names\n    if list-item is scale-name\n      return i + 1\n  return false\n\n-convert-to(to-unit, value, context = rupture.base-font-size)\n  from-unit = unit(value)\n  return value if to-unit is from-unit\n  if to-unit in ('em' 'rem')\n    return value if from-unit in ('em' 'rem')\n    return unit((value / context), to-unit)\n  if to-unit is 'px'\n    return unit((value * context), 'px')\n\n-on-scale(n)\n  return unit(n) is ''\n\n-larger-than-scale(n)\n  return (n > (length(rupture.scale) - 1)) and -on-scale(n)\n\n-is-zero(n)\n  return n is 0\n\n-overlap-shift(anti-overlap, n)\n  shift-unit = unit(n)\n  anti-overlap = 0px unless anti-overlap\n  anti-overlap = 1px if anti-overlap is true\n  if length(anti-overlap) is 1\n    return -convert-to(shift-unit, anti-overlap)\n  for val in anti-overlap\n    return val if unit(val) is shift-unit\n\n-adjust-overlap(anti-overlap, n, side = 'min')\n  -shift = -overlap-shift(anti-overlap, n)\n  if (side is 'min' and -shift > 0) or (side is 'max' and -shift < 0)\n    n = n + -shift\n  return n\n\n-is-positive(n)\n  return n >= 0\n\n-density-queries(density)\n  if typeof(density) is not 'unit'\n    if not -is-string(density)\n      density = '%s' % density\n  density = rupture.retina-density if density is 'retina'\n  queries = ()\n  for query in rupture.density-queries\n    if query is 'webkit'\n      push(queries, '(-webkit-min-device-pixel-ratio: %s)' % (density))\n    else if query is 'moz'\n      push(queries, '(min--moz-device-pixel-ratio: %s)' % (density))\n    else if query is 'o'\n      push(queries, '(-o-min-device-pixel-ratio: %s/1)' % (density))\n    else if query is 'ratio'\n      push(queries, '(min-device-pixel-ratio: %s)' % (density))\n    else if query is 'dpi'\n      if -is-string(density)\n        density=convert(density)\n      push(queries, '(min-resolution: %sdpi)' % (round(density * 96, 1)))\n    else if query is 'dppx'\n      push(queries, '(min-resolution: %sdppx)' % (density))\n  return queries\n\ncreate-fallback-class(selected, class)\n  /{'' + class + ' ' + selected}\n    {block}\n\n// +between(min, max)\n// usage (scale can be mixed with custom values):\n//   - +between(1, 3) scale:scale\n//   - +between(0, 3) 0 width:scale\n//   - +between(200px, 500px) custom:custom\n//   - +between(0, 300px) 0 width:custom\n//   - +between(1, 300px) scale:custom\n//   - +between(200px, 4) custom:scale\n\nbetween(min, max, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  selected = selector()\n\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  if -is-string(min)\n    min = -get-scale-number(min)\n  if -is-string(max)\n    max = -get-scale-number(max)\n\n  -min = rupture.scale[min - 1] unless -is-zero(min) or (not -on-scale(min))\n  -max = rupture.scale[max] unless not -on-scale(max)\n  -min ?= min\n  -max ?= max\n\n  if (rupture.rasterise-media-queries)\n    if not (density or -max or orientation)\n      {block}\n  else\n    condition = 'only screen'\n    use-device-width = use-device-width ? 'device-' : ''\n    unless -min is 0\n      -min = -convert-to('em', -min) if rupture.enable-em-breakpoints\n      -min = -adjust-overlap(anti-overlap, -min, side: 'min')\n      condition = condition + ' and (min-' + use-device-width + 'width: %s)' % (-min)\n    unless -larger-than-scale(max)\n      -max = -convert-to('em', -max) if rupture.enable-em-breakpoints\n      -max = -adjust-overlap(anti-overlap, -max, side: 'max')\n      condition = condition + ' and (max-' + use-device-width + 'width: %s)' % (-max)\n    if orientation\n      condition = condition + ' and (orientation: %s)' % (orientation)\n    if density\n      conditions = ()\n      for query in -density-queries(density)\n        push(conditions, condition + ' and %s' % (query))\n      condition = join(', ', conditions)\n    @media condition\n      {block}\n  if fallback-class\n    +create-fallback-class(selected, fallback-class)\n      {block}\n\nat(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(scale-point, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nfrom-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(scale-point, length(rupture.scale), anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nabove = from-width\n\nto-width(scale-point, anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(1, scale-point, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nbelow = to-width\n\nmobile(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +below(rupture.mobile-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ntablet(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +between(rupture.mobile-cutoff, rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ndesktop(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +above(rupture.desktop-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\nhd(anti-overlap = rupture.anti-overlap, density = null, orientation = null, use-device-width = rupture.use-device-width, fallback-class = null)\n  if -is-string(orientation)\n    orientation = convert(orientation)\n  if -is-string(density)\n    density = convert(density)\n  +above(rupture.hd-cutoff, anti-overlap, density, orientation, use-device-width, fallback-class)\n    {block}\n\ndensity(density, orientation = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    conditions = ()\n    for query in -density-queries(density)\n      condition = 'only screen and %s' % (query)\n      if orientation\n        condition = condition + ' and (orientation: %s)' % (orientation)\n      push(conditions, condition)\n    condition = join(', ', conditions)\n    @media condition\n      {block}\n    if fallback-class\n      +create-fallback-class(selected, fallback-class)\n        {block}\n\npixel-ratio = density\n\nretina(orientation = null, fallback-class = null)\n  +density('retina', orientation, fallback-class)\n    {block}\n\nlandscape(density = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    if -is-string(density)\n      density = convert(density)\n    if density\n      +pixel-ratio(density, orientation: landscape, fallback-class)\n        {block}\n    else\n      @media only screen and (orientation: landscape)\n        {block}\n      if fallback-class\n        +create-fallback-class(selected, fallback-class)\n          {block}\n\nportrait(density = null, fallback-class = null)\n  selected = selector()\n  if not (rupture.rasterise-media-queries)\n    if -is-string(density)\n      density = convert(density)\n    if density\n      +pixel-ratio(density, orientation: portrait, fallback-class)\n        {block}\n    else\n      @media only screen and (orientation: portrait)\n        {block}\n      if fallback-class\n        +create-fallback-class(selected, fallback-class)\n          {block}\n"]}