{"version":3,"sources":["app.js","account.js","addStuff.js","geoService.js","homeCtrl.js","loginCtrl.js","logoutCtrl.js","navbar.js","profileCtrl.js","signupCtrl.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjfile":"js.min.js","sourcesContent":["angular.module('app', ['ui.router', 'satellizer', 'ngMap'])\n\n    .config(function ($authProvider, $stateProvider, $urlRouterProvider, $locationProvider) {\n\n        $authProvider.facebook({\n            clientId: '1670205403245071'\n        });\n\n        $authProvider.google({\n            clientId: '696255640250-ha91c7enlsravhptab5c63punfunlh8u.apps.googleusercontent.com'\n        });\n\n        $urlRouterProvider.otherwise(\"/\");\n\n        $stateProvider\n            .state('home', {\n                url: '/',\n                controller: 'homeCtrl',\n                templateUrl: 'partials/home.html'\n            })\n            .state('login', {\n                url: '/login',\n                templateUrl: 'partials/login.html',\n                controller: 'loginCtrl',\n                resolve: {\n                    skipIfLoggedIn: skipIfLoggedIn\n                }\n            })\n            .state('signup', {\n                url: '/signup',\n                templateUrl: 'partials/signup.html',\n                controller: 'signupCtrl',\n                resolve: {\n                    skipIfLoggedIn: skipIfLoggedIn\n                }\n            })\n            .state('logout', {\n                url: '/logout',\n                template: null,\n                controller: 'logoutCtrl'\n            })\n            .state('profile', {\n                url: '/profile',\n                templateUrl: 'partials/profile.html',\n                controller: 'profileCtrl',\n                resolve: {\n                    loginRequired: loginRequired\n                }\n            })\n            .state('addStuff', {\n                url: '/addstuff',\n                templateUrl: 'partials/addStuff.html',\n                controller: 'addStuff',\n                resolve: {\n                    loginRequired: loginRequired\n                }\n            })\n            .state('maps', {\n                url: '/maps',\n                templateUrl: 'partials/maps.html',\n                controller: 'NavbarCtrl',\n                controllerAs: 'vm'\n            });\n\n\n        function skipIfLoggedIn($q, $auth) {\n            var deferred = $q.defer();\n            if ($auth.isAuthenticated()) {\n                deferred.reject();\n            } else {\n                deferred.resolve();\n            }\n            return deferred.promise;\n        }\n\n        function loginRequired($q, $location, $auth) {\n            var deferred = $q.defer();\n            if ($auth.isAuthenticated()) {\n                deferred.resolve();\n            } else {\n                $location.path('/login');\n            }\n            return deferred.promise;\n        }\n\n    });\n","angular.module('app')\n    .factory('Account', function ($http) {\n        return {\n            getProfile: function () {\n                return $http.get('/api/me');\n            },\n            updateProfile: function (profileData) {\n                return $http.put('/api/me', profileData);\n            }\n        };\n    });\n","angular.module('app')\n    .service('addStuffService', function ($http, geoService) {\n\n        var vm = this;\n\n        // geoService.getCurrentPosition().then(function(latlng){\n        //     geoService.reverseGeoCode(latlng).then(function(city){\n        //         $scope.city = city;\n        //         console.log(city);\n        //     })\n        // });\n        //\n        // geoService.geoCode('295 E 7800 S 84047').then(function(latlng){\n        //     console.log(latlng);\n        // });\n\n        vm.addBus = function (addBus) {\n            return geoService.geoCode(addBus.bus.address).then(function (lnglat) {\n                var loc = {\n                    type: \"Point\",\n                    coordinates: lnglat\n                };\n                addBus.bus.loc = loc;\n                addBus.deal.loc = loc;\n                addBus.deal.address = addBus.bus.address;\n                addBus.deal.day = [addBus.deal.day];\n                return $http({\n                    method: 'POST',\n                    data: addBus,\n                    url: '/api/bus'\n                })\n            });\n        };\n\n        vm.addDeal = function (deal) {\n            //we need to add geolocation and address to this before it will save\n            // the user will probably have those and we can grab them then\n            return $http({\n                method: 'POST',\n                data: deal,\n                url: '/api/deal'\n            })\n        };\n\n    });\n","angular.module('app')\n    .service('geoService', function($http, $q) {\n\n        var vm = this;\n\n        function minuteToMs(min) {\n            return min * 60000;\n        }\n\n        var options = {\n            timeout: 4000,\n            maximumAge: minuteToMs(60)\n        };\n\n        var key = \"AIzaSyDOreIswD8rCeAp8GmTzd_s-f7pH_M6nnc\";\n\n        vm.getCurrentPosition = function() {\n            var deferred = $q.defer();\n            if (!navigator.geolocation) {\n                deferred.reject('Geolocation not supported.');\n            } else {\n                navigator.geolocation.getCurrentPosition(\n                    function(pos) {\n                        deferred.resolve(pos.coords.latitude.toString() + ',' + pos.coords.longitude.toString());\n                    },\n                    function(err) {\n                        deferred.reject(err);\n                    }, options);\n            }\n            return deferred.promise;\n        };\n\n        vm.geoCode = function(address) {\n            return $http({\n                method: 'GET',\n                params: {\n                    address: address,\n                    components: \"components=country:US\",\n                    key: key\n                },\n                url: 'https://maps.googleapis.com/maps/api/geocode/json'\n            }).then(function(result) {\n                return [result.data.results[0].geometry.location.lng, result.data.results[0].geometry.location.lat];\n            });\n        };\n\n        vm.reverseGeoCode = function(latlng) {\n            return $http({\n                method: 'GET',\n                params: {\n                    latlng: latlng,\n                    result_type: \"locality\",\n                    language: \"en\",\n                    location_type: \"APPROXIMATE\",\n                    key: key\n                },\n                url: 'https://maps.googleapis.com/maps/api/geocode/json'\n            }).then(function(result) {\n                return result.data.results[0].formatted_address.split(\",\").slice(0, -1).join(',');\n            });\n        };\n\n        // console.log(business.formatted_address)\n        // console.log(JSON.stringify(vm.place));\n        // console.log(vm.place.geometry.location.lat());\n        // console.log(vm.place.geometry.location.lng());\n\n        vm.newBusiness = function(business) {\n            var newBusiness = {\n                address: business.formatted_address,\n                phone: business.formatted_phone_number,\n                loc: {\n                    coordinates: [Number(business.geometry.location.lng()), Number(business.geometry.location.lat())]\n                },\n                busName: business.name,\n                busHours: business.opening_hours.weekday_text,\n                placeId: business.place_id,\n                website: business.website\n\n            };\n            return $http({\n                method: 'POST',\n                data: newBusiness,\n                url: '/api/bus'\n            })\n        };\n\n    });\n","angular.module('app')\n    .controller('homeCtrl', function ($scope, $auth, geoService) {\n\n        $scope.isAuthenticated = function () {\n            return $auth.isAuthenticated();\n        };\n\n        // geoService.getCurrentPosition().then(function(latlng){\n        //     geoService.reverseGeoCode(latlng).then(function(city){\n        //         $scope.city = city;\n        //         console.log(city);\n        //     })\n        // });\n\n        // geoService.geoCode('295 E 7800 S 84047').then(function(latlng){\n        //     console.log(latlng);\n        // })\n\n    });\n","angular.module('app')\n    .controller('loginCtrl', function ($scope, $location, $auth) {\n\n        $scope.login = function () {\n            $auth.login($scope.user)\n                .then(function () {\n                    // toastr.success('You have successfully signed in!');\n                    $location.path('/');\n                })\n                .catch(function (error) {\n                    // toastr.error(error.data.message, error.status);\n                });\n        };\n\n        $scope.authenticate = function (provider) {\n            $auth.authenticate(provider)\n                .then(function () {\n                    // toastr.success('You have successfully signed in with ' + provider + '!');\n                    $location.path('/');\n                })\n                .catch(function (error) {\n                    if (error.error) {\n                        // Popup error - invalid redirect_uri, pressed cancel button, etc.\n                        // toastr.error(error.error);\n                    } else if (error.data) {\n                        // HTTP response error from server\n                        // toastr.error(error.data.message, error.status);\n                    } else {\n                        // toastr.error(error);\n                    }\n                });\n        };\n    });\n","angular.module('app')\n    .controller('logoutCtrl', function ($location, $auth) {\n        if (!$auth.isAuthenticated()) {\n            return;\n        }\n        $auth.logout()\n            .then(function () {\n                // toastr.info('You have been logged out');\n                $location.path('/');\n            });\n    });\n","angular.module('app')\n    .controller('NavbarCtrl', function ($scope, $auth, NgMap, geoService) {\n\n        var vm = this;\n\n        vm.isAuthenticated = function () {\n            return $auth.isAuthenticated();\n        };\n\n        vm.types = \"['establishment']\";\n\n        geoService.getCurrentPosition().then(function(latlng){\n            geoService.reverseGeoCode(latlng).then(function(city){\n                vm.city = city;\n            })\n        });\n\n        vm.placeChanged = function () {\n            vm.place = this.getPlace();\n            vm.map.setCenter(vm.place.geometry.location);\n            vm.marker = new google.maps.Marker({\n                position: vm.place.geometry.location,\n                map: vm.map,\n                title: vm.place.name\n            });\n            \n        };\n\n        vm.addBusiness = function () {\n            geoService.newBusiness(vm.place).then(function (res) {\n                $scope.addedBus = res;\n            });\n        };\n\n        NgMap.getMap().then(function (map) {\n            geoService.getCurrentPosition().then(function (latlng) {\n                vm.map = map;\n                vm.temp = latlng.split(',');\n                vm.center = new google.maps.LatLng(Number(vm.temp[0]), Number(vm.temp[1]));\n                vm.map.setCenter(vm.center);\n                vm.map.setZoom(12);\n            });\n        });\n\n    });\n","angular.module('app')\n    .controller('profileCtrl', function ($scope, $auth, Account) {\n        $scope.getProfile = function () {\n            Account.getProfile()\n                .then(function (response) {\n                    $scope.user = response.data;\n                })\n                .catch(function (response) {\n                    // toastr.error(response.data.message, response.status);\n                });\n        };\n        $scope.updateProfile = function () {\n            Account.updateProfile($scope.user)\n                .then(function () {\n                    // toastr.success('Profile has been updated');\n                })\n                .catch(function (response) {\n                    // toastr.error(response.data.message, response.status);\n                });\n        };\n        $scope.link = function (provider) {\n            $auth.link(provider)\n                .then(function () {\n                    // toastr.success('You have successfully linked a ' + provider + ' account');\n                    $scope.getProfile();\n                })\n                .catch(function (response) {\n                    // toastr.error(response.data.message, response.status);\n                });\n        };\n        $scope.unlink = function (provider) {\n            $auth.unlink(provider)\n                .then(function () {\n                    // toastr.info('You have unlinked a ' + provider + ' account');\n                    $scope.getProfile();\n                })\n                .catch(function (response) {\n                    // toastr.error(response.data ? response.data.message : 'Could not unlink ' + provider + ' account', response.status);\n                });\n        };\n\n        $scope.getProfile();\n    });\n","angular.module('app')\n    .controller('signupCtrl', function ($scope, $location, $auth) {\n        $scope.signup = function () {\n            $auth.signup($scope.user)\n                .then(function (response) {\n                    $auth.setToken(response);\n                    $location.path('/');\n                    // toastr.info('You have successfully created a new account and have been signed-in');\n                })\n                .catch(function (response) {\n                    // toastr.error(response.data.message);\n                });\n        };\n    });\n"],"sourceRoot":"/source/"}